/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ILensInterface extends ethers.utils.Interface {
  functions: {
    "getDerivedPosition(uint256)": FunctionFragment;
    "getFeeAmounts(tuple,tuple)": FunctionFragment;
    "getPosition(uint256)": FunctionFragment;
    "hub()": FunctionFragment;
    "isSettled(tuple,tuple)": FunctionFragment;
    "manager()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getDerivedPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeAmounts",
    values: [
      {
        owner: string;
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
      },
      {
        liquidityD8: BigNumberish;
        feeGrowthInside0Last: BigNumberish;
        feeGrowthInside1Last: BigNumberish;
        limitOrderType: BigNumberish;
        settlementSnapshotId: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "hub", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isSettled",
    values: [
      {
        owner: string;
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
      },
      {
        liquidityD8: BigNumberish;
        feeGrowthInside0Last: BigNumberish;
        feeGrowthInside1Last: BigNumberish;
        limitOrderType: BigNumberish;
        settlementSnapshotId: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getDerivedPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hub", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSettled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;

  events: {};
}

export class ILens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ILensInterface;

  functions: {
    getDerivedPosition(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, number, number, number] & {
          owner: string;
          token0: string;
          token1: string;
          tierId: number;
          tickLower: number;
          tickUpper: number;
        },
        [BigNumber, BigNumber, BigNumber, number, number] & {
          liquidityD8: BigNumber;
          feeGrowthInside0Last: BigNumber;
          feeGrowthInside1Last: BigNumber;
          limitOrderType: number;
          settlementSnapshotId: number;
        },
        BigNumber,
        BigNumber,
        boolean
      ] & {
        info: [string, string, string, number, number, number] & {
          owner: string;
          token0: string;
          token1: string;
          tierId: number;
          tickLower: number;
          tickUpper: number;
        };
        position: [BigNumber, BigNumber, BigNumber, number, number] & {
          liquidityD8: BigNumber;
          feeGrowthInside0Last: BigNumber;
          feeGrowthInside1Last: BigNumber;
          limitOrderType: number;
          settlementSnapshotId: number;
        };
        feeAmount0: BigNumber;
        feeAmount1: BigNumber;
        settled: boolean;
      }
    >;

    getFeeAmounts(
      info: {
        owner: string;
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
      },
      position: {
        liquidityD8: BigNumberish;
        feeGrowthInside0Last: BigNumberish;
        feeGrowthInside1Last: BigNumberish;
        limitOrderType: BigNumberish;
        settlementSnapshotId: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { feeAmount0: BigNumber; feeAmount1: BigNumber }
    >;

    getPosition(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, number, number, number] & {
          owner: string;
          token0: string;
          token1: string;
          tierId: number;
          tickLower: number;
          tickUpper: number;
        },
        [BigNumber, BigNumber, BigNumber, number, number] & {
          liquidityD8: BigNumber;
          feeGrowthInside0Last: BigNumber;
          feeGrowthInside1Last: BigNumber;
          limitOrderType: number;
          settlementSnapshotId: number;
        }
      ] & {
        info: [string, string, string, number, number, number] & {
          owner: string;
          token0: string;
          token1: string;
          tierId: number;
          tickLower: number;
          tickUpper: number;
        };
        position: [BigNumber, BigNumber, BigNumber, number, number] & {
          liquidityD8: BigNumber;
          feeGrowthInside0Last: BigNumber;
          feeGrowthInside1Last: BigNumber;
          limitOrderType: number;
          settlementSnapshotId: number;
        };
      }
    >;

    hub(overrides?: CallOverrides): Promise<[string]>;

    isSettled(
      info: {
        owner: string;
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
      },
      position: {
        liquidityD8: BigNumberish;
        feeGrowthInside0Last: BigNumberish;
        feeGrowthInside1Last: BigNumberish;
        limitOrderType: BigNumberish;
        settlementSnapshotId: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[boolean] & { settled: boolean }>;

    manager(overrides?: CallOverrides): Promise<[string]>;
  };

  getDerivedPosition(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [string, string, string, number, number, number] & {
        owner: string;
        token0: string;
        token1: string;
        tierId: number;
        tickLower: number;
        tickUpper: number;
      },
      [BigNumber, BigNumber, BigNumber, number, number] & {
        liquidityD8: BigNumber;
        feeGrowthInside0Last: BigNumber;
        feeGrowthInside1Last: BigNumber;
        limitOrderType: number;
        settlementSnapshotId: number;
      },
      BigNumber,
      BigNumber,
      boolean
    ] & {
      info: [string, string, string, number, number, number] & {
        owner: string;
        token0: string;
        token1: string;
        tierId: number;
        tickLower: number;
        tickUpper: number;
      };
      position: [BigNumber, BigNumber, BigNumber, number, number] & {
        liquidityD8: BigNumber;
        feeGrowthInside0Last: BigNumber;
        feeGrowthInside1Last: BigNumber;
        limitOrderType: number;
        settlementSnapshotId: number;
      };
      feeAmount0: BigNumber;
      feeAmount1: BigNumber;
      settled: boolean;
    }
  >;

  getFeeAmounts(
    info: {
      owner: string;
      token0: string;
      token1: string;
      tierId: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
    },
    position: {
      liquidityD8: BigNumberish;
      feeGrowthInside0Last: BigNumberish;
      feeGrowthInside1Last: BigNumberish;
      limitOrderType: BigNumberish;
      settlementSnapshotId: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { feeAmount0: BigNumber; feeAmount1: BigNumber }
  >;

  getPosition(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [string, string, string, number, number, number] & {
        owner: string;
        token0: string;
        token1: string;
        tierId: number;
        tickLower: number;
        tickUpper: number;
      },
      [BigNumber, BigNumber, BigNumber, number, number] & {
        liquidityD8: BigNumber;
        feeGrowthInside0Last: BigNumber;
        feeGrowthInside1Last: BigNumber;
        limitOrderType: number;
        settlementSnapshotId: number;
      }
    ] & {
      info: [string, string, string, number, number, number] & {
        owner: string;
        token0: string;
        token1: string;
        tierId: number;
        tickLower: number;
        tickUpper: number;
      };
      position: [BigNumber, BigNumber, BigNumber, number, number] & {
        liquidityD8: BigNumber;
        feeGrowthInside0Last: BigNumber;
        feeGrowthInside1Last: BigNumber;
        limitOrderType: number;
        settlementSnapshotId: number;
      };
    }
  >;

  hub(overrides?: CallOverrides): Promise<string>;

  isSettled(
    info: {
      owner: string;
      token0: string;
      token1: string;
      tierId: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
    },
    position: {
      liquidityD8: BigNumberish;
      feeGrowthInside0Last: BigNumberish;
      feeGrowthInside1Last: BigNumberish;
      limitOrderType: BigNumberish;
      settlementSnapshotId: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<boolean>;

  manager(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getDerivedPosition(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, number, number, number] & {
          owner: string;
          token0: string;
          token1: string;
          tierId: number;
          tickLower: number;
          tickUpper: number;
        },
        [BigNumber, BigNumber, BigNumber, number, number] & {
          liquidityD8: BigNumber;
          feeGrowthInside0Last: BigNumber;
          feeGrowthInside1Last: BigNumber;
          limitOrderType: number;
          settlementSnapshotId: number;
        },
        BigNumber,
        BigNumber,
        boolean
      ] & {
        info: [string, string, string, number, number, number] & {
          owner: string;
          token0: string;
          token1: string;
          tierId: number;
          tickLower: number;
          tickUpper: number;
        };
        position: [BigNumber, BigNumber, BigNumber, number, number] & {
          liquidityD8: BigNumber;
          feeGrowthInside0Last: BigNumber;
          feeGrowthInside1Last: BigNumber;
          limitOrderType: number;
          settlementSnapshotId: number;
        };
        feeAmount0: BigNumber;
        feeAmount1: BigNumber;
        settled: boolean;
      }
    >;

    getFeeAmounts(
      info: {
        owner: string;
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
      },
      position: {
        liquidityD8: BigNumberish;
        feeGrowthInside0Last: BigNumberish;
        feeGrowthInside1Last: BigNumberish;
        limitOrderType: BigNumberish;
        settlementSnapshotId: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { feeAmount0: BigNumber; feeAmount1: BigNumber }
    >;

    getPosition(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, number, number, number] & {
          owner: string;
          token0: string;
          token1: string;
          tierId: number;
          tickLower: number;
          tickUpper: number;
        },
        [BigNumber, BigNumber, BigNumber, number, number] & {
          liquidityD8: BigNumber;
          feeGrowthInside0Last: BigNumber;
          feeGrowthInside1Last: BigNumber;
          limitOrderType: number;
          settlementSnapshotId: number;
        }
      ] & {
        info: [string, string, string, number, number, number] & {
          owner: string;
          token0: string;
          token1: string;
          tierId: number;
          tickLower: number;
          tickUpper: number;
        };
        position: [BigNumber, BigNumber, BigNumber, number, number] & {
          liquidityD8: BigNumber;
          feeGrowthInside0Last: BigNumber;
          feeGrowthInside1Last: BigNumber;
          limitOrderType: number;
          settlementSnapshotId: number;
        };
      }
    >;

    hub(overrides?: CallOverrides): Promise<string>;

    isSettled(
      info: {
        owner: string;
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
      },
      position: {
        liquidityD8: BigNumberish;
        feeGrowthInside0Last: BigNumberish;
        feeGrowthInside1Last: BigNumberish;
        limitOrderType: BigNumberish;
        settlementSnapshotId: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<boolean>;

    manager(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getDerivedPosition(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeAmounts(
      info: {
        owner: string;
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
      },
      position: {
        liquidityD8: BigNumberish;
        feeGrowthInside0Last: BigNumberish;
        feeGrowthInside1Last: BigNumberish;
        limitOrderType: BigNumberish;
        settlementSnapshotId: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hub(overrides?: CallOverrides): Promise<BigNumber>;

    isSettled(
      info: {
        owner: string;
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
      },
      position: {
        liquidityD8: BigNumberish;
        feeGrowthInside0Last: BigNumberish;
        feeGrowthInside1Last: BigNumberish;
        limitOrderType: BigNumberish;
        settlementSnapshotId: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getDerivedPosition(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeAmounts(
      info: {
        owner: string;
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
      },
      position: {
        liquidityD8: BigNumberish;
        feeGrowthInside0Last: BigNumberish;
        feeGrowthInside1Last: BigNumberish;
        limitOrderType: BigNumberish;
        settlementSnapshotId: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSettled(
      info: {
        owner: string;
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
      },
      position: {
        liquidityD8: BigNumberish;
        feeGrowthInside0Last: BigNumberish;
        feeGrowthInside1Last: BigNumberish;
        limitOrderType: BigNumberish;
        settlementSnapshotId: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
