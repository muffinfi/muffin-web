/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IMuffinHubCombinedInterface extends ethers.utils.Interface {
  functions: {
    "accounts(address,bytes32)": FunctionFragment;
    "addTier(address,address,uint24,uint256)": FunctionFragment;
    "burn(tuple)": FunctionFragment;
    "collectProtocolFee(address,address)": FunctionFragment;
    "collectSettled(tuple)": FunctionFragment;
    "createPool(address,address,uint24,uint128,uint256)": FunctionFragment;
    "deposit(address,uint256,address,uint256,bytes)": FunctionFragment;
    "getAllTiers(bytes32)": FunctionFragment;
    "getDefaultParameters()": FunctionFragment;
    "getLimitOrderTickSpacingMultipliers(bytes32)": FunctionFragment;
    "getPoolParameters(bytes32)": FunctionFragment;
    "getPosition(bytes32,address,uint256,uint8,int24,int24)": FunctionFragment;
    "getPositionFeeGrowthInside(bytes32,address,uint256,uint8,int24,int24)": FunctionFragment;
    "getPositionSecondsPerLiquidityInside(bytes32,address,uint256,uint8,int24,int24)": FunctionFragment;
    "getSettlement(bytes32,uint8,int24,bool)": FunctionFragment;
    "getSettlementSnapshot(bytes32,uint8,int24,bool,uint32)": FunctionFragment;
    "getTWAP(bytes32)": FunctionFragment;
    "getTick(bytes32,uint8,int24)": FunctionFragment;
    "getTier(bytes32,uint8)": FunctionFragment;
    "getTiersCount(bytes32)": FunctionFragment;
    "governance()": FunctionFragment;
    "mint(tuple)": FunctionFragment;
    "setDefaultParameters(uint8,uint8)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setLimitOrderType(address,address,uint8,int24,int24,uint256,uint8)": FunctionFragment;
    "setPoolParameters(bytes32,uint8,uint8)": FunctionFragment;
    "setTierParameters(bytes32,uint8,uint24,uint8)": FunctionFragment;
    "swap(address,address,uint256,int256,address,uint256,uint256,bytes)": FunctionFragment;
    "swapMultiHop(tuple)": FunctionFragment;
    "tokens(address)": FunctionFragment;
    "underlyings(bytes32)": FunctionFragment;
    "withdraw(address,uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accounts",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addTier",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [
      {
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityD8: BigNumberish;
        positionRefId: BigNumberish;
        accRefId: BigNumberish;
        collectAllFees: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectProtocolFee",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "collectSettled",
    values: [
      {
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityD8: BigNumberish;
        positionRefId: BigNumberish;
        accRefId: BigNumberish;
        collectAllFees: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTiers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLimitOrderTickSpacingMultipliers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolParameters",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [
      BytesLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionFeeGrowthInside",
    values: [
      BytesLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionSecondsPerLiquidityInside",
    values: [
      BytesLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlement",
    values: [BytesLike, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementSnapshot",
    values: [BytesLike, BigNumberish, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getTWAP", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getTick",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTier",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTiersCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      {
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityD8: BigNumberish;
        recipient: string;
        positionRefId: BigNumberish;
        senderAccRefId: BigNumberish;
        data: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultParameters",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLimitOrderType",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolParameters",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTierParameters",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapMultiHop",
    values: [
      {
        path: BytesLike;
        amountDesired: BigNumberish;
        recipient: string;
        recipientAccRefId: BigNumberish;
        senderAccRefId: BigNumberish;
        data: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "tokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "underlyings",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addTier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectSettled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLimitOrderTickSpacingMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionFeeGrowthInside",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionSecondsPerLiquidityInside",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTWAP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTiersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLimitOrderType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTierParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapMultiHop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Burn(bytes32,address,uint256,uint8,int24,int24,uint256,uint96,uint256,uint256,uint256,uint256)": EventFragment;
    "CollectProtocol(address,address,uint256)": EventFragment;
    "CollectSettled(bytes32,address,uint256,uint8,int24,int24,uint256,uint96,uint256,uint256,uint256,uint256)": EventFragment;
    "Deposit(address,uint256,address,uint256,address)": EventFragment;
    "GovernanceUpdated(address)": EventFragment;
    "Mint(bytes32,address,uint256,uint8,int24,int24,address,uint256,uint96,uint256,uint256)": EventFragment;
    "PoolCreated(address,address,bytes32)": EventFragment;
    "SetLimitOrderType(bytes32,address,uint256,uint8,int24,int24,uint8)": EventFragment;
    "Swap(bytes32,address,address,uint256,uint256,int256,int256,uint256,uint256[])": EventFragment;
    "UpdateDefaultParameters(uint8,uint8)": EventFragment;
    "UpdatePool(bytes32,uint8,uint8)": EventFragment;
    "UpdateTier(bytes32,uint8,uint24,uint8)": EventFragment;
    "Withdraw(address,uint256,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectProtocol"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLimitOrderType"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDefaultParameters"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class IMuffinHubCombined extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IMuffinHubCombinedInterface;

  functions: {
    accounts(
      token: string,
      accHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    addTier(
      token0: string,
      token1: string,
      sqrtGamma: BigNumberish,
      senderAccRefId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burn(
      params: {
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityD8: BigNumberish;
        positionRefId: BigNumberish;
        accRefId: BigNumberish;
        collectAllFees: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectProtocolFee(
      token: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectSettled(
      params: {
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityD8: BigNumberish;
        positionRefId: BigNumberish;
        accRefId: BigNumberish;
        collectAllFees: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPool(
      token0: string,
      token1: string,
      sqrtGamma: BigNumberish,
      sqrtPrice: BigNumberish,
      senderAccRefId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      recipient: string,
      recipientAccRefId: BigNumberish,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllTiers(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          BigNumber,
          number,
          number,
          number,
          number,
          BigNumber,
          BigNumber
        ] & {
          liquidity: BigNumber;
          sqrtPrice: BigNumber;
          sqrtGamma: number;
          tick: number;
          nextTickBelow: number;
          nextTickAbove: number;
          feeGrowthGlobal0: BigNumber;
          feeGrowthGlobal1: BigNumber;
        })[]
      ]
    >;

    getDefaultParameters(
      overrides?: CallOverrides
    ): Promise<[number, number] & { tickSpacing: number; protocolFee: number }>;

    getLimitOrderTickSpacingMultipliers(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[[number, number, number, number, number, number]]>;

    getPoolParameters(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, number] & { tickSpacing: number; protocolFee: number }>;

    getPosition(
      poolId: BytesLike,
      owner: string,
      positionRefId: BigNumberish,
      tierId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, number, number] & {
          liquidityD8: BigNumber;
          feeGrowthInside0Last: BigNumber;
          feeGrowthInside1Last: BigNumber;
          limitOrderType: number;
          settlementSnapshotId: number;
        }
      ]
    >;

    getPositionFeeGrowthInside(
      poolId: BytesLike,
      owner: string,
      positionRefId: BigNumberish,
      tierId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeGrowthInside0: BigNumber;
        feeGrowthInside1: BigNumber;
      }
    >;

    getPositionSecondsPerLiquidityInside(
      poolId: BytesLike,
      owner: string,
      positionRefId: BigNumberish,
      tierId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { secondsPerLiquidityInside: BigNumber }>;

    getSettlement(
      poolId: BytesLike,
      tierId: BigNumberish,
      tick: BigNumberish,
      isToken0LimitOrder: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number] & {
        liquidityD8: BigNumber;
        tickSpacing: number;
        snapshotId: number;
      }
    >;

    getSettlementSnapshot(
      poolId: BytesLike,
      tierId: BigNumberish,
      tick: BigNumberish,
      isToken0LimitOrder: boolean,
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          feeGrowthInside0: BigNumber;
          feeGrowthInside1: BigNumber;
          secondsPerLiquidityInside: BigNumber;
        }
      ]
    >;

    getTWAP(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, number, number, BigNumber] & {
        lastUpdate: number;
        tickCumulative: BigNumber;
        tickEma20: number;
        tickEma40: number;
        secondsPerLiquidityCumulative: BigNumber;
      }
    >;

    getTick(
      poolId: BytesLike,
      tierId: BigNumberish,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          number,
          number,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          liquidityLowerD8: BigNumber;
          liquidityUpperD8: BigNumber;
          nextBelow: number;
          nextAbove: number;
          needSettle0: boolean;
          needSettle1: boolean;
          feeGrowthOutside0: BigNumber;
          feeGrowthOutside1: BigNumber;
          secondsPerLiquidityOutside: BigNumber;
        }
      ]
    >;

    getTier(
      poolId: BytesLike,
      tierId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          number,
          number,
          number,
          number,
          BigNumber,
          BigNumber
        ] & {
          liquidity: BigNumber;
          sqrtPrice: BigNumber;
          sqrtGamma: number;
          tick: number;
          nextTickBelow: number;
          nextTickAbove: number;
          feeGrowthGlobal0: BigNumber;
          feeGrowthGlobal1: BigNumber;
        }
      ]
    >;

    getTiersCount(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    mint(
      params: {
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityD8: BigNumberish;
        recipient: string;
        positionRefId: BigNumberish;
        senderAccRefId: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultParameters(
      tickSpacing: BigNumberish,
      protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLimitOrderType(
      token0: string,
      token1: string,
      tierId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      positionRefId: BigNumberish,
      limitOrderType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolParameters(
      poolId: BytesLike,
      tickSpacing: BigNumberish,
      protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTierParameters(
      poolId: BytesLike,
      tierId: BigNumberish,
      sqrtGamma: BigNumberish,
      limitOrderTickSpacingMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      tokenIn: string,
      tokenOut: string,
      tierChoices: BigNumberish,
      amountDesired: BigNumberish,
      recipient: string,
      recipientAccRefId: BigNumberish,
      senderAccRefId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapMultiHop(
      params: {
        path: BytesLike;
        amountDesired: BigNumberish;
        recipient: string;
        recipientAccRefId: BigNumberish;
        senderAccRefId: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokens(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & { locked: number; protocolFeeAmt: BigNumber }
    >;

    underlyings(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string] & { token0: string; token1: string }>;

    withdraw(
      recipient: string,
      senderAccRefId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accounts(
    token: string,
    accHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addTier(
    token0: string,
    token1: string,
    sqrtGamma: BigNumberish,
    senderAccRefId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burn(
    params: {
      token0: string;
      token1: string;
      tierId: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      liquidityD8: BigNumberish;
      positionRefId: BigNumberish;
      accRefId: BigNumberish;
      collectAllFees: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectProtocolFee(
    token: string,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectSettled(
    params: {
      token0: string;
      token1: string;
      tierId: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      liquidityD8: BigNumberish;
      positionRefId: BigNumberish;
      accRefId: BigNumberish;
      collectAllFees: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPool(
    token0: string,
    token1: string,
    sqrtGamma: BigNumberish,
    sqrtPrice: BigNumberish,
    senderAccRefId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    recipient: string,
    recipientAccRefId: BigNumberish,
    token: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllTiers(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      BigNumber,
      number,
      number,
      number,
      number,
      BigNumber,
      BigNumber
    ] & {
      liquidity: BigNumber;
      sqrtPrice: BigNumber;
      sqrtGamma: number;
      tick: number;
      nextTickBelow: number;
      nextTickAbove: number;
      feeGrowthGlobal0: BigNumber;
      feeGrowthGlobal1: BigNumber;
    })[]
  >;

  getDefaultParameters(
    overrides?: CallOverrides
  ): Promise<[number, number] & { tickSpacing: number; protocolFee: number }>;

  getLimitOrderTickSpacingMultipliers(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number, number, number, number, number, number]>;

  getPoolParameters(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<[number, number] & { tickSpacing: number; protocolFee: number }>;

  getPosition(
    poolId: BytesLike,
    owner: string,
    positionRefId: BigNumberish,
    tierId: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, number] & {
      liquidityD8: BigNumber;
      feeGrowthInside0Last: BigNumber;
      feeGrowthInside1Last: BigNumber;
      limitOrderType: number;
      settlementSnapshotId: number;
    }
  >;

  getPositionFeeGrowthInside(
    poolId: BytesLike,
    owner: string,
    positionRefId: BigNumberish,
    tierId: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      feeGrowthInside0: BigNumber;
      feeGrowthInside1: BigNumber;
    }
  >;

  getPositionSecondsPerLiquidityInside(
    poolId: BytesLike,
    owner: string,
    positionRefId: BigNumberish,
    tierId: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSettlement(
    poolId: BytesLike,
    tierId: BigNumberish,
    tick: BigNumberish,
    isToken0LimitOrder: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number] & {
      liquidityD8: BigNumber;
      tickSpacing: number;
      snapshotId: number;
    }
  >;

  getSettlementSnapshot(
    poolId: BytesLike,
    tierId: BigNumberish,
    tick: BigNumberish,
    isToken0LimitOrder: boolean,
    snapshotId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      feeGrowthInside0: BigNumber;
      feeGrowthInside1: BigNumber;
      secondsPerLiquidityInside: BigNumber;
    }
  >;

  getTWAP(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, number, number, BigNumber] & {
      lastUpdate: number;
      tickCumulative: BigNumber;
      tickEma20: number;
      tickEma40: number;
      secondsPerLiquidityCumulative: BigNumber;
    }
  >;

  getTick(
    poolId: BytesLike,
    tierId: BigNumberish,
    tick: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      number,
      number,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      liquidityLowerD8: BigNumber;
      liquidityUpperD8: BigNumber;
      nextBelow: number;
      nextAbove: number;
      needSettle0: boolean;
      needSettle1: boolean;
      feeGrowthOutside0: BigNumber;
      feeGrowthOutside1: BigNumber;
      secondsPerLiquidityOutside: BigNumber;
    }
  >;

  getTier(
    poolId: BytesLike,
    tierId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      number,
      number,
      number,
      number,
      BigNumber,
      BigNumber
    ] & {
      liquidity: BigNumber;
      sqrtPrice: BigNumber;
      sqrtGamma: number;
      tick: number;
      nextTickBelow: number;
      nextTickAbove: number;
      feeGrowthGlobal0: BigNumber;
      feeGrowthGlobal1: BigNumber;
    }
  >;

  getTiersCount(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  mint(
    params: {
      token0: string;
      token1: string;
      tierId: BigNumberish;
      tickLower: BigNumberish;
      tickUpper: BigNumberish;
      liquidityD8: BigNumberish;
      recipient: string;
      positionRefId: BigNumberish;
      senderAccRefId: BigNumberish;
      data: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultParameters(
    tickSpacing: BigNumberish,
    protocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLimitOrderType(
    token0: string,
    token1: string,
    tierId: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    positionRefId: BigNumberish,
    limitOrderType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolParameters(
    poolId: BytesLike,
    tickSpacing: BigNumberish,
    protocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTierParameters(
    poolId: BytesLike,
    tierId: BigNumberish,
    sqrtGamma: BigNumberish,
    limitOrderTickSpacingMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    tokenIn: string,
    tokenOut: string,
    tierChoices: BigNumberish,
    amountDesired: BigNumberish,
    recipient: string,
    recipientAccRefId: BigNumberish,
    senderAccRefId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapMultiHop(
    params: {
      path: BytesLike;
      amountDesired: BigNumberish;
      recipient: string;
      recipientAccRefId: BigNumberish;
      senderAccRefId: BigNumberish;
      data: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokens(
    token: string,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber] & { locked: number; protocolFeeAmt: BigNumber }
  >;

  underlyings(
    poolId: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string] & { token0: string; token1: string }>;

  withdraw(
    recipient: string,
    senderAccRefId: BigNumberish,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accounts(
      token: string,
      accHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addTier(
      token0: string,
      token1: string,
      sqrtGamma: BigNumberish,
      senderAccRefId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burn(
      params: {
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityD8: BigNumberish;
        positionRefId: BigNumberish;
        accRefId: BigNumberish;
        collectAllFees: boolean;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount0: BigNumber;
        amount1: BigNumber;
        feeAmount0: BigNumber;
        feeAmount1: BigNumber;
      }
    >;

    collectProtocolFee(
      token: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectSettled(
      params: {
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityD8: BigNumberish;
        positionRefId: BigNumberish;
        accRefId: BigNumberish;
        collectAllFees: boolean;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount0: BigNumber;
        amount1: BigNumber;
        feeAmount0: BigNumber;
        feeAmount1: BigNumber;
      }
    >;

    createPool(
      token0: string,
      token1: string,
      sqrtGamma: BigNumberish,
      sqrtPrice: BigNumberish,
      senderAccRefId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deposit(
      recipient: string,
      recipientAccRefId: BigNumberish,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllTiers(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        number,
        BigNumber,
        BigNumber
      ] & {
        liquidity: BigNumber;
        sqrtPrice: BigNumber;
        sqrtGamma: number;
        tick: number;
        nextTickBelow: number;
        nextTickAbove: number;
        feeGrowthGlobal0: BigNumber;
        feeGrowthGlobal1: BigNumber;
      })[]
    >;

    getDefaultParameters(
      overrides?: CallOverrides
    ): Promise<[number, number] & { tickSpacing: number; protocolFee: number }>;

    getLimitOrderTickSpacingMultipliers(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, number, number, number, number, number]>;

    getPoolParameters(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number, number] & { tickSpacing: number; protocolFee: number }>;

    getPosition(
      poolId: BytesLike,
      owner: string,
      positionRefId: BigNumberish,
      tierId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, number] & {
        liquidityD8: BigNumber;
        feeGrowthInside0Last: BigNumber;
        feeGrowthInside1Last: BigNumber;
        limitOrderType: number;
        settlementSnapshotId: number;
      }
    >;

    getPositionFeeGrowthInside(
      poolId: BytesLike,
      owner: string,
      positionRefId: BigNumberish,
      tierId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeGrowthInside0: BigNumber;
        feeGrowthInside1: BigNumber;
      }
    >;

    getPositionSecondsPerLiquidityInside(
      poolId: BytesLike,
      owner: string,
      positionRefId: BigNumberish,
      tierId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSettlement(
      poolId: BytesLike,
      tierId: BigNumberish,
      tick: BigNumberish,
      isToken0LimitOrder: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number] & {
        liquidityD8: BigNumber;
        tickSpacing: number;
        snapshotId: number;
      }
    >;

    getSettlementSnapshot(
      poolId: BytesLike,
      tierId: BigNumberish,
      tick: BigNumberish,
      isToken0LimitOrder: boolean,
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        feeGrowthInside0: BigNumber;
        feeGrowthInside1: BigNumber;
        secondsPerLiquidityInside: BigNumber;
      }
    >;

    getTWAP(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, number, number, BigNumber] & {
        lastUpdate: number;
        tickCumulative: BigNumber;
        tickEma20: number;
        tickEma40: number;
        secondsPerLiquidityCumulative: BigNumber;
      }
    >;

    getTick(
      poolId: BytesLike,
      tierId: BigNumberish,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        number,
        number,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        liquidityLowerD8: BigNumber;
        liquidityUpperD8: BigNumber;
        nextBelow: number;
        nextAbove: number;
        needSettle0: boolean;
        needSettle1: boolean;
        feeGrowthOutside0: BigNumber;
        feeGrowthOutside1: BigNumber;
        secondsPerLiquidityOutside: BigNumber;
      }
    >;

    getTier(
      poolId: BytesLike,
      tierId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        number,
        BigNumber,
        BigNumber
      ] & {
        liquidity: BigNumber;
        sqrtPrice: BigNumber;
        sqrtGamma: number;
        tick: number;
        nextTickBelow: number;
        nextTickAbove: number;
        feeGrowthGlobal0: BigNumber;
        feeGrowthGlobal1: BigNumber;
      }
    >;

    getTiersCount(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    mint(
      params: {
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityD8: BigNumberish;
        recipient: string;
        positionRefId: BigNumberish;
        senderAccRefId: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    setDefaultParameters(
      tickSpacing: BigNumberish,
      protocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLimitOrderType(
      token0: string,
      token1: string,
      tierId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      positionRefId: BigNumberish,
      limitOrderType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolParameters(
      poolId: BytesLike,
      tickSpacing: BigNumberish,
      protocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTierParameters(
      poolId: BytesLike,
      tierId: BigNumberish,
      sqrtGamma: BigNumberish,
      limitOrderTickSpacingMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      tokenIn: string,
      tokenOut: string,
      tierChoices: BigNumberish,
      amountDesired: BigNumberish,
      recipient: string,
      recipientAccRefId: BigNumberish,
      senderAccRefId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountIn: BigNumber; amountOut: BigNumber }
    >;

    swapMultiHop(
      params: {
        path: BytesLike;
        amountDesired: BigNumberish;
        recipient: string;
        recipientAccRefId: BigNumberish;
        senderAccRefId: BigNumberish;
        data: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountIn: BigNumber; amountOut: BigNumber }
    >;

    tokens(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber] & { locked: number; protocolFeeAmt: BigNumber }
    >;

    underlyings(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string] & { token0: string; token1: string }>;

    withdraw(
      recipient: string,
      senderAccRefId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Burn(
      poolId?: BytesLike | null,
      owner?: string | null,
      positionRefId?: BigNumberish | null,
      tierId?: null,
      tickLower?: null,
      tickUpper?: null,
      ownerAccRefId?: null,
      liquidityD8?: null,
      amount0?: null,
      amount1?: null,
      feeAmount0?: null,
      feeAmount1?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        poolId: string;
        owner: string;
        positionRefId: BigNumber;
        tierId: number;
        tickLower: number;
        tickUpper: number;
        ownerAccRefId: BigNumber;
        liquidityD8: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
        feeAmount0: BigNumber;
        feeAmount1: BigNumber;
      }
    >;

    CollectProtocol(
      recipient?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { recipient: string; token: string; amount: BigNumber }
    >;

    CollectSettled(
      poolId?: BytesLike | null,
      owner?: string | null,
      positionRefId?: BigNumberish | null,
      tierId?: null,
      tickLower?: null,
      tickUpper?: null,
      ownerAccRefId?: null,
      liquidityD8?: null,
      amount0?: null,
      amount1?: null,
      feeAmount0?: null,
      feeAmount1?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        poolId: string;
        owner: string;
        positionRefId: BigNumber;
        tierId: number;
        tickLower: number;
        tickUpper: number;
        ownerAccRefId: BigNumber;
        liquidityD8: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
        feeAmount0: BigNumber;
        feeAmount1: BigNumber;
      }
    >;

    Deposit(
      recipient?: string | null,
      recipientAccRefId?: BigNumberish | null,
      token?: string | null,
      amount?: null,
      sender?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, string],
      {
        recipient: string;
        recipientAccRefId: BigNumber;
        token: string;
        amount: BigNumber;
        sender: string;
      }
    >;

    GovernanceUpdated(
      governance?: string | null
    ): TypedEventFilter<[string], { governance: string }>;

    Mint(
      poolId?: BytesLike | null,
      owner?: string | null,
      positionRefId?: BigNumberish | null,
      tierId?: null,
      tickLower?: null,
      tickUpper?: null,
      sender?: null,
      senderAccRefId?: null,
      liquidityD8?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        number,
        number,
        number,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        poolId: string;
        owner: string;
        positionRefId: BigNumber;
        tierId: number;
        tickLower: number;
        tickUpper: number;
        sender: string;
        senderAccRefId: BigNumber;
        liquidityD8: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    PoolCreated(
      token0?: string | null,
      token1?: string | null,
      poolId?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { token0: string; token1: string; poolId: string }
    >;

    SetLimitOrderType(
      poolId?: BytesLike | null,
      owner?: string | null,
      positionRefId?: BigNumberish | null,
      tierId?: null,
      tickLower?: null,
      tickUpper?: null,
      limitOrderType?: null
    ): TypedEventFilter<
      [string, string, BigNumber, number, number, number, number],
      {
        poolId: string;
        owner: string;
        positionRefId: BigNumber;
        tierId: number;
        tickLower: number;
        tickUpper: number;
        limitOrderType: number;
      }
    >;

    Swap(
      poolId?: BytesLike | null,
      sender?: string | null,
      recipient?: string | null,
      senderAccRefId?: null,
      recipientAccRefId?: null,
      amount0?: null,
      amount1?: null,
      amountInDistribution?: null,
      tierData?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ],
      {
        poolId: string;
        sender: string;
        recipient: string;
        senderAccRefId: BigNumber;
        recipientAccRefId: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
        amountInDistribution: BigNumber;
        tierData: BigNumber[];
      }
    >;

    UpdateDefaultParameters(
      tickSpacing?: null,
      protocolFee?: null
    ): TypedEventFilter<
      [number, number],
      { tickSpacing: number; protocolFee: number }
    >;

    UpdatePool(
      poolId?: BytesLike | null,
      tickSpacing?: null,
      protocolFee?: null
    ): TypedEventFilter<
      [string, number, number],
      { poolId: string; tickSpacing: number; protocolFee: number }
    >;

    UpdateTier(
      poolId?: BytesLike | null,
      tierId?: BigNumberish | null,
      sqrtGamma?: BigNumberish | null,
      limitOrderTickSpacingMultiplier?: null
    ): TypedEventFilter<
      [string, number, number, number],
      {
        poolId: string;
        tierId: number;
        sqrtGamma: number;
        limitOrderTickSpacingMultiplier: number;
      }
    >;

    Withdraw(
      sender?: string | null,
      senderAccRefId?: BigNumberish | null,
      token?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, string],
      {
        sender: string;
        senderAccRefId: BigNumber;
        token: string;
        amount: BigNumber;
        recipient: string;
      }
    >;
  };

  estimateGas: {
    accounts(
      token: string,
      accHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addTier(
      token0: string,
      token1: string,
      sqrtGamma: BigNumberish,
      senderAccRefId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burn(
      params: {
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityD8: BigNumberish;
        positionRefId: BigNumberish;
        accRefId: BigNumberish;
        collectAllFees: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectProtocolFee(
      token: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectSettled(
      params: {
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityD8: BigNumberish;
        positionRefId: BigNumberish;
        accRefId: BigNumberish;
        collectAllFees: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPool(
      token0: string,
      token1: string,
      sqrtGamma: BigNumberish,
      sqrtPrice: BigNumberish,
      senderAccRefId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      recipient: string,
      recipientAccRefId: BigNumberish,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllTiers(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefaultParameters(overrides?: CallOverrides): Promise<BigNumber>;

    getLimitOrderTickSpacingMultipliers(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolParameters(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      poolId: BytesLike,
      owner: string,
      positionRefId: BigNumberish,
      tierId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionFeeGrowthInside(
      poolId: BytesLike,
      owner: string,
      positionRefId: BigNumberish,
      tierId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionSecondsPerLiquidityInside(
      poolId: BytesLike,
      owner: string,
      positionRefId: BigNumberish,
      tierId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSettlement(
      poolId: BytesLike,
      tierId: BigNumberish,
      tick: BigNumberish,
      isToken0LimitOrder: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSettlementSnapshot(
      poolId: BytesLike,
      tierId: BigNumberish,
      tick: BigNumberish,
      isToken0LimitOrder: boolean,
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTWAP(poolId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getTick(
      poolId: BytesLike,
      tierId: BigNumberish,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTier(
      poolId: BytesLike,
      tierId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTiersCount(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      params: {
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityD8: BigNumberish;
        recipient: string;
        positionRefId: BigNumberish;
        senderAccRefId: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultParameters(
      tickSpacing: BigNumberish,
      protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLimitOrderType(
      token0: string,
      token1: string,
      tierId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      positionRefId: BigNumberish,
      limitOrderType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolParameters(
      poolId: BytesLike,
      tickSpacing: BigNumberish,
      protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTierParameters(
      poolId: BytesLike,
      tierId: BigNumberish,
      sqrtGamma: BigNumberish,
      limitOrderTickSpacingMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      tokenIn: string,
      tokenOut: string,
      tierChoices: BigNumberish,
      amountDesired: BigNumberish,
      recipient: string,
      recipientAccRefId: BigNumberish,
      senderAccRefId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapMultiHop(
      params: {
        path: BytesLike;
        amountDesired: BigNumberish;
        recipient: string;
        recipientAccRefId: BigNumberish;
        senderAccRefId: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokens(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    underlyings(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      recipient: string,
      senderAccRefId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accounts(
      token: string,
      accHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addTier(
      token0: string,
      token1: string,
      sqrtGamma: BigNumberish,
      senderAccRefId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      params: {
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityD8: BigNumberish;
        positionRefId: BigNumberish;
        accRefId: BigNumberish;
        collectAllFees: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectProtocolFee(
      token: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectSettled(
      params: {
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityD8: BigNumberish;
        positionRefId: BigNumberish;
        accRefId: BigNumberish;
        collectAllFees: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPool(
      token0: string,
      token1: string,
      sqrtGamma: BigNumberish,
      sqrtPrice: BigNumberish,
      senderAccRefId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      recipient: string,
      recipientAccRefId: BigNumberish,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllTiers(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultParameters(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLimitOrderTickSpacingMultipliers(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolParameters(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      poolId: BytesLike,
      owner: string,
      positionRefId: BigNumberish,
      tierId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionFeeGrowthInside(
      poolId: BytesLike,
      owner: string,
      positionRefId: BigNumberish,
      tierId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionSecondsPerLiquidityInside(
      poolId: BytesLike,
      owner: string,
      positionRefId: BigNumberish,
      tierId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSettlement(
      poolId: BytesLike,
      tierId: BigNumberish,
      tick: BigNumberish,
      isToken0LimitOrder: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSettlementSnapshot(
      poolId: BytesLike,
      tierId: BigNumberish,
      tick: BigNumberish,
      isToken0LimitOrder: boolean,
      snapshotId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTWAP(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTick(
      poolId: BytesLike,
      tierId: BigNumberish,
      tick: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTier(
      poolId: BytesLike,
      tierId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTiersCount(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      params: {
        token0: string;
        token1: string;
        tierId: BigNumberish;
        tickLower: BigNumberish;
        tickUpper: BigNumberish;
        liquidityD8: BigNumberish;
        recipient: string;
        positionRefId: BigNumberish;
        senderAccRefId: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultParameters(
      tickSpacing: BigNumberish,
      protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLimitOrderType(
      token0: string,
      token1: string,
      tierId: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      positionRefId: BigNumberish,
      limitOrderType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolParameters(
      poolId: BytesLike,
      tickSpacing: BigNumberish,
      protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTierParameters(
      poolId: BytesLike,
      tierId: BigNumberish,
      sqrtGamma: BigNumberish,
      limitOrderTickSpacingMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      tokenIn: string,
      tokenOut: string,
      tierChoices: BigNumberish,
      amountDesired: BigNumberish,
      recipient: string,
      recipientAccRefId: BigNumberish,
      senderAccRefId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapMultiHop(
      params: {
        path: BytesLike;
        amountDesired: BigNumberish;
        recipient: string;
        recipientAccRefId: BigNumberish;
        senderAccRefId: BigNumberish;
        data: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokens(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyings(
      poolId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      recipient: string,
      senderAccRefId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
